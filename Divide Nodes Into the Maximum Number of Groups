You are given a positive integer n representing the number of nodes in an undirected graph. The nodes are labeled from 1 to n.

You are also given a 2D integer array edges, where edges[i] = [ai, bi] indicates that there is a bidirectional edge between nodes ai and bi. Notice that the given graph may be disconnected.

Divide the nodes of the graph into m groups (1-indexed) such that:

Each node in the graph belongs to exactly one group.
For every pair of nodes in the graph that are connected by an edge [ai, bi], if ai belongs to the group with index x, and bi belongs to the group with index y, then |y - x| = 1.
Return the maximum number of groups (i.e., maximum m) into which you can divide the nodes. Return -1 if it is impossible to group the nodes with the given conditions.

 

Example 1:


Input: n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]
Output: 4
Explanation: As shown in the image we:
- Add node 5 to the first group.
- Add node 1 to the second group.
- Add nodes 2 and 4 to the third group.
- Add nodes 3 and 6 to the fourth group.
We can see that every edge is satisfied.
It can be shown that that if we create a fifth group and move any node from the third or fourth group to it, at least on of the edges will not be satisfied.
Example 2:

Input: n = 3, edges = [[1,2],[2,3],[3,1]]
Output: -1
Explanation: If we add node 1 to the first group, node 2 to the second group, and node 3 to the third group to satisfy the first two edges, we can see that the third edge will not be satisfied.
It can be shown that no grouping is possible.
 

Constraints:

1 <= n <= 500
1 <= edges.length <= 104
edges[i].length == 2
1 <= ai, bi <= n
ai != bi
There is at most one edge between any pair of vertices.

class Solution {
    public int magnificentSets(int n, int[][] edges) {
        // In summary first we have to check if the graph
        // is Bipartile or not if not return -1
        // if yes then from each node do BFS and get the max Level
        // we can get and at last add the max level from
        // each disconnected groups .
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < edges.length; i++) {
            int u = edges[i][0] - 1;
            int v = edges[i][1] - 1;

            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        // if a graph is not Bipartile then return -1 from there only
        int[] color = new int[n];
        Arrays.fill(color, -1);
        for (int i = 0; i < n; i++) {
            if (color[i] == -1) {
                if (!isBipartiteGraph(adj, i, color, 0))
                    return -1;
            }
        }
        // BFS karke max levels nikalo for each node
        int[] levels = new int[n];
        for (int i = 0; i < n; i++) {
            int currLevel = bfs(adj, i,n);
            levels[i] = currLevel;
        }
        // from each disconnected components take max and sum up them
        int maxNumOfGroups = 0;
        boolean[] vis = new boolean[n];
        for (int i = 0; i < n; i++) {
            if (!vis[i]) {
                maxNumOfGroups += maxfromCurrentDisconnectedGroup(adj, vis,
                        levels, i);
            }
        }
        return maxNumOfGroups;
    }

    private boolean isBipartiteGraph(List<List<Integer>> adj, int node, int[] color, int currColor) {
        color[node] = currColor;

        for (int adjNode : adj.get(node)) {
            if (color[adjNode] == color[node])
                return false;
            if (color[adjNode] == -1) {
                if (!isBipartiteGraph(adj, adjNode, color, 1 - currColor))
                    return false;
            }
        }
        return true;
    }

    private int bfs(List<List<Integer>> adj, int node,int n) {
        Queue<Integer> q = new LinkedList<>();
        boolean[] vis = new boolean[n];
        vis[node] = true;
        q.offer(node);
        int level = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int curr = q.poll();
                for (int adjNode : adj.get(curr)) {
                    if (!vis[adjNode]) {
                        vis[adjNode] = true;
                        q.offer(adjNode);
                    }
                }
            }
            level++;
        }
        return level;
    }

    private int maxfromCurrentDisconnectedGroup(List<List<Integer>> adj,
            boolean[] vis, int[] levels, int node) {
        vis[node] = true;
        int maxLevel = levels[node];
        for (int adjNode : adj.get(node)) {
            if (!vis[adjNode]) {
                vis[adjNode] = true;
                maxLevel = Math.max(maxLevel, maxfromCurrentDisconnectedGroup(adj, vis,
                        levels, adjNode));
            }
        }
        return maxLevel;
    }
}
