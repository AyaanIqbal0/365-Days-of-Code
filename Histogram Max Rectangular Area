You are given a histogram represented by an array arr, where each element of the array denotes the height of the bars in the histogram. All bars have the same width of 1 unit.

Your task is to find the largest rectangular area possible in the given histogram, where the rectangle can be formed using a number of contiguous bars.

Examples:

Input: arr[] = [60, 20, 50, 40, 10, 50, 60]
 Largest-Rectangular-Area-in-a-Histogram
Output: 100
Explanation: We get the maximum by picking bars highlighted above in green (50, and 60). The area is computed (smallest height) * (no. of the picked bars) = 50 * 2 = 100.
Input: arr[] = [3, 5, 1, 7, 5, 9]
Output: 15
Explanation:  We get the maximum by picking bars 7, 5 and 9. The area is computed (smallest height) * (no. of the picked bars) = 5 * 3 = 15.
Input: arr[] = [3]
Output: 3
Explanation: In this example the largest area would be 3 of height 3 and width 1.
Constraints:
1 ≤ arr.size() ≤ 105
0 ≤ arr[i] ≤ 104


class Solution {
    public static int getMaxArea(int hist[]) {
        int n = hist.length;
      
        int area=0;
        int prevSmaller[]=new int [n];
        Stack<Integer> st =new Stack<>();
        //finding previous smaller element
        for(int i=0;i<n;i++){
                    while(!st.isEmpty() && hist[st.peek()] >=hist[i]){
                        st.pop();
                    }
                    if(!st.isEmpty()){
                        prevSmaller[i]=st.peek()+1;
                    }else{
                        prevSmaller[i]=0;
                    }
                    st.push(i);
        }

        //finding the next Smaller element
        int nextSmaller[]=new int [n];
         st =new Stack<>();
        //finding previous smaller element
        for(int i=hist.length-1;i>=0;i--){
                    while(!st.isEmpty() && hist[st.peek()] >=hist[i]){
                        st.pop();
                    }
                    if(!st.isEmpty()){
                        nextSmaller[i]=st.peek()-1;
                    }else{
                        nextSmaller[i]=hist.length-1;
                    }
                    st.push(i);
        }

        //Calculating the area of the histogram
        for(int i=0;i<hist.length;i++){
            int h=hist[i];
            int currArea=(nextSmaller[i]-prevSmaller[i]+1) *h;
            area=Math.max(area,currArea);
        }
        return area;
    }
}
