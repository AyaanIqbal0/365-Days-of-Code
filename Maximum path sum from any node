Given a binary tree, the task is to find the maximum path sum. The path may start and end at any node in the tree.

Examples:

Input: root[] = [10, 2, 10, 20, 1, N, -25, N, N, N, N, 3, 4]
Output: 42
Explanation: 

Max path sum is represented using green colour nodes in the above binary tree.
Input: root[] = [-17, 11, 4, 20, -2, 10]
Output: 31
Explanation: 

Max path sum is represented using green colour nodes in the above binary tree.
Constraints:
1 ≤ number of nodes ≤ 103
-104 ≤ node->data ≤ 104


class Solution
{
    int maxSum=Integer.MIN_VALUE;
    int findMaxSum(Node node)
    {
        if(node ==null){
            return 0;
        }
        maxPath(node);
        
        return maxSum;
    }
     public int maxPath(Node root){
        if(root==null){
            return 0;
        }
        int leftSum=Math.max(0,maxPath(root.left));
        int rightSum=Math.max(0,maxPath(root.right));

        maxSum =Math.max(maxSum,leftSum+rightSum+root.data);

        return Math.max(leftSum,rightSum)+root.data;

    }
}
