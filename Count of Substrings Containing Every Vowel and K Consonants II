You are given a string word and a non-negative integer k.

Return the total number of substrings of word that contain every vowel ('a', 'e', 'i', 'o', and 'u') at least once and exactly k consonants.

 

Example 1:

Input: word = "aeioqq", k = 1

Output: 0

Explanation:

There is no substring with every vowel.

Example 2:

Input: word = "aeiou", k = 0

Output: 1

Explanation:

The only substring with every vowel and zero consonants is word[0..4], which is "aeiou".

Example 3:

Input: word = "ieaouqqieaouqq", k = 1

Output: 3

Explanation:

The substrings with every vowel and one consonant are:

word[0..5], which is "ieaouq".
word[6..11], which is "qieaou".
word[7..12], which is "ieaouq".
 

Constraints:

5 <= word.length <= 2 * 105
word consists only of lowercase English letters.
0 <= k <= word.length - 5

class Solution {
    public long countOfSubstrings(String word, int k) {
        int n=word.length();
    return solve(word,k,n)- solve(word,k+1,n);
    }
  private long solve(String word, int k, int n) {
    HashMap<Character, Integer> vowelMap = new HashMap<>();
    long count = 0;
    int consonants = 0;
    int j = 0;

    for (int i = 0; i < n; i++) {
        char ch = word.charAt(i); 
        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
            vowelMap.put(ch, vowelMap.getOrDefault(ch, 0) + 1);
        } else {
            consonants++;
        }

        while (consonants >= k && vowelMap.size() == 5) {
            count += (n - i );

            char ch1 = word.charAt(j);
            if (ch1 == 'a' || ch1 == 'e' || ch1 == 'i' || ch1 == 'o' || ch1 == 'u') {
                vowelMap.put(ch1, vowelMap.get(ch1) - 1);
                if (vowelMap.get(ch1) == 0) {
                    vowelMap.remove(ch1);  
                }
            } else {
                consonants--;
            }
            j++;
        }
    }
    return count;
}
}
