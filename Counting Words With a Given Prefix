You are given an array of strings words and a string pref.

Return the number of strings in words that contain pref as a prefix.

A prefix of a string s is any leading contiguous substring of s.

 

Example 1:

Input: words = ["pay","attention","practice","attend"], pref = "at"
Output: 2
Explanation: The 2 strings that contain "at" as a prefix are: "attention" and "attend".
Example 2:

Input: words = ["leetcode","win","loops","success"], pref = "code"
Output: 0
Explanation: There are no strings that contain "code" as a prefix.
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length, pref.length <= 100
words[i] and pref consist of lowercase English letters.


class Solution {
    static class TrieNode {
        TrieNode[] children;
        boolean endOfWord;
        int count;

        public TrieNode() {
            children = new TrieNode[26];
            endOfWord = false;
            count = 0;
        }
    }

    static class Trie {
        TrieNode root;

        public Trie() {
            root = new TrieNode();
        }

    public void insert(String word) {
    TrieNode curr = root;
    for (int i = 0; i < word.length(); i++) {
        int ind = word.charAt(i) - 'a';
        if (curr.children[ind] == null) {
            curr.children[ind] = new TrieNode();
        }
        curr = curr.children[ind]; 
        curr.count++;               
    }
    curr.endOfWord = true;
}
        public int findPrefix(String prefix) {
            TrieNode curr = root;
            for (int i = 0; i < prefix.length(); i++) {
                int ind = prefix.charAt(i) - 'a';
                if (curr.children[ind] == null) {
                    return 0;
                }
                curr = curr.children[ind];
            }
            return curr.count;
        }
    }

    public int prefixCount(String[] words, String pref) {
        Trie trie = new Trie();
        for (String word : words) {
            trie.insert(word);
        }
        return trie.findPrefix(pref);
    }
}

