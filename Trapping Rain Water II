Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.

 

Example 1:


Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]
Output: 4
Explanation: After the rain, water is trapped between the blocks.
We have two small ponds 1 and 3 units trapped.
The total volume of water trapped is 4.
Example 2:


Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]
Output: 10
 

Constraints:

m == heightMap.length
n == heightMap[i].length
1 <= m, n <= 200
0 <= heightMap[i][j] <= 2 * 104

class Solution {
    int[] dx = { -1, 1, 0, 0 };
    int[] dy = { 0, 0, -1, 1 };

    public int trapRainWater(int[][] heightMap) {
        int n = heightMap.length;
        int m = heightMap[0].length;
        boolean[][] vis = new boolean[n][m];
        PriorityQueue<int[]> boundaryCells = new PriorityQueue<>((a, b) -> a[0] - b[0]);

        // Pushing all Boundary cells
        for (int i = 0; i < n; i++) {
            boundaryCells.offer(new int[] { heightMap[i][0], i, 0 });
            boundaryCells.offer(new int[] { heightMap[i][m - 1], i, m - 1 });
            vis[i][0] = true;
            vis[i][m - 1] = true;
        }
        for (int j = 0; j < m; j++) {
            boundaryCells.offer(new int[] { heightMap[0][j], 0, j });
            boundaryCells.offer(new int[] { heightMap[n - 1][j], n - 1, j });
            vis[0][j] = true;
            vis[n - 1][j] = true;
        }
        int totalWater = 0;
        while (!boundaryCells.isEmpty()) {
            int[] curr = boundaryCells.poll();
            int val = curr[0];
            int i = curr[1];
            int j = curr[2];
            for (int ind = 0; ind < 4; ind++) {
                int newRow = i + dx[ind];
                int newCol = j + dy[ind];

                if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && !vis[newRow][newCol]) {
                    vis[newRow][newCol] = true;
                    totalWater += Math.max(val - heightMap[newRow][newCol], 0);
                    boundaryCells.offer(new int[] {
                            Math.max(val, heightMap[newRow][newCol]),
                            newRow,
                            newCol
                    });
                }
            }
        }
        return totalWater;
    }
}
