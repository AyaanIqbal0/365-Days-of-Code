Given a string s, return the length of the longest palindromic subsequence.

A subsequence is a sequence that can be derived from the given sequence by deleting some or no elements without changing the order of the remaining elements.

A palindromic sequence is a sequence that reads the same forward and backward.

Examples:

Input: s = "bbabcbcab"
Output: 7
Explanation: Subsequence "babcbab" is the longest subsequence which is also a palindrome.
Input: s = "abcd"
Output: 1
Explanation: "a", "b", "c" and "d" are palindromic and all have a length 1.
Input: s = "agbdba"
Output: 5
Explanation: The longest palindromic subsequence is "abdba", which has a length of 5. The characters in this subsequence are taken from the original string "agbdba", and they maintain the order of the string while forming a palindrome.
Constraints:
1 ≤ s.size() ≤ 1000
The string contains only lowercase letters.


class Solution {
    public int longestPalinSubseq(String s) {
     StringBuilder sb = new StringBuilder(s);
    return lcs(s, sb.reverse().toString());
     
    }
     int lcs(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();
       int [][]dp = new int[n][m];
       for(int i=0;i<n;i++){
           for(int j=0;j<m;j++){
               dp[i][j]=-1;
           }
       }
       
       return solve(s1,s2,0,0,dp);
    }
    private int solve(String s1 , String s2, int i, int j,
    int [][]dp){
        if(i== s1.length() || j == s2.length()){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(s1.charAt(i)== s2.charAt(j)){
         return  dp[i][j]=1+ solve(s1,s2,i+1,j+1,dp);
        }
       return dp[i][j]=Math.max(solve(s1,s2,i+1,j,dp), solve(s1,s2,i,j+1,dp));
    }
}
