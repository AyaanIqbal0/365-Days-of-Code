Given an integer n, find a sequence that satisfies all of the following:

The integer 1 occurs once in the sequence.
Each integer between 2 and n occurs twice in the sequence.
For every integer i between 2 and n, the distance between the two occurrences of i is exactly i.
The distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.

Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution.

A sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.

 

Example 1:

Input: n = 3
Output: [3,1,2,3,2]
Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.
Example 2:

Input: n = 5
Output: [5,3,1,4,3,5,2,4,2]
 

Constraints:

1 <= n <= 20


class Solution {
    public int[] constructDistancedSequence(int n) {
        int N = 2 * n - 1;
        int[] res = new int[N];
        boolean[] used = new boolean[n + 1];
        solve(0, n, res, used);
        return res;
    }

    private boolean solve(int ind, int n, int[] res, boolean[] used) {
        // base case
        if (ind == res.length) {
            return true;
        }
        // if we are at a index that is already placed move ind+1
        if (res[ind] != 0) {
            return solve(ind + 1, n, res, used);
        }
        // try all possible starting from n till 1
        for (int num = n; num >= 1; num--) {
            // if already used skip
            if (used[num])
                continue;
            res[ind] = num;
            used[num] = true;

            if (num == 1) {
                // see if it give correct answer
                if (solve(ind + 1, n, res, used))
                    return true;
            } else {
                // get the second index for num
                int j = num + ind;
                if (j < res.length && res[j] == 0) {
                    res[j] = num;
                    if (solve(ind + 1, n, res, used))
                        return true;
                    // backtrack
                    res[j] = 0;
                }
            }
            res[ind] = 0;
            used[num] = false;
        }
        return false;
    }
}
