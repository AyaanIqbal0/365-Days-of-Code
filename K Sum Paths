Given a binary tree and an integer k, determine the number of downward-only paths where the sum of the node values in the path equals k. A path can start and end at any node within the tree but must always move downward (from parent to child).

Examples:

Input: k = 7   

Output: 3
Explanation: The following paths sum to k 
 
Input: k = 3
   1
  /  \
2     3
Output: 2
Explanation:
Path 1 : 1 -> 2 (Sum = 3)
Path 2 : 3 (Sum = 3)
Constraints:

1 ≤ number of nodes ≤ 104
-100 ≤ node value ≤ 100
-109 ≤ k ≤ 109


class Solution {
    int count =0;
    public int sumK(Node root, int k) {
        Map<Integer,Integer> map = new HashMap<>();
        map.put(0,1);
        findSumK(root,k,map,0);
        return count;
    }
    private void findSumK(Node root,int k,Map<Integer,Integer> map,
    int sum){
        if(root ==null){
            return;
        }
        sum+=root.data;
        if(map.containsKey(sum-k)){
            count+=map.get(sum-k);
        }
        map.put(sum,map.getOrDefault(sum,0)+1);
        findSumK(root.left,k,map,sum);
        findSumK(root.right,k,map,sum);
        
        map.put(sum,map.get(sum)-1);
        if (map.get(sum) == 0) {
            map.remove(sum);
        }
    }
}
