Given a Binary Search Tree(BST) and a target. Check whether there's a pair of Nodes in the BST with value summing up to the target. 

Examples:

Input: root = [7, 3, 8, 2, 4, N, 9], target = 12
       bst
Output: True
Explanation: In the binary tree above, there are two nodes (8 and 4) that add up to 12.
Input: root = [9, 5, 10, 2, 6, N, 12], target = 23
          bst-3
Output: False
Explanation: In the binary tree above, there are no such two nodes exists that add up to 23.
Constraints:

1 ≤ Number of Nodes ≤ 105
1 ≤ target ≤ 106


class Solution {
    boolean findTarget(Node root, int target) {
       Set<Integer> set = new HashSet<>();
     return dfs(root,set,target);
    }
    private boolean dfs(Node root,Set<Integer> set,int target){
        if(root ==null){
            return false;
        }
        if(set.contains(target-root.data)){
            return true;
        }
        set.add(root.data);
       return dfs(root.left,set,target) ||  dfs(root.right,set,target);
    }
}

