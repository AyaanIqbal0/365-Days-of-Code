Given an array of integers arr[], the task is to find the maximum of the minimum values for every possible window size in the array, where the window size ranges from 1 to arr.size().

More formally, for each window size k, determine the smallest element in all windows of size k, and then find the largest value among these minimums where 1<=k<=arr.size().

Examples :

Input: arr[] = [10, 20, 30, 50, 10, 70, 30]
Output: [70, 30, 20, 10, 10, 10, 10] 
Explanation: 
1. First element in output indicates maximum of minimums of all windows of size 1. Minimums of windows of size 1 are [10], [20], [30], [50], [10], [70] and [30]. Maximum of these minimums is 70. 
2. Second element in output indicates maximum of minimums of all windows of size 2. Minimums of windows of size 2 are [10], [20], [30], [10], [10], and [30]. Maximum of these minimums is 30. 
3. Third element in output indicates maximum of minimums of all windows of size 3. Minimums of windows of size 3 are [10], [20], [10], [10] and [10]. Maximum of these minimums is 20. 
Similarly other elements of output are computed.
Input: arr[] = [10, 20, 30]
Output: [30, 20, 10]
Explanation: First element in output indicates maximum of minimums of all windows of size 1. Minimums of windows of size 1 are [10] , [20] , [30]. Maximum of these minimums are 30 and similarly other outputs can be computed
Constraints:
1 <= arr.size() <= 105
1 <= arr[i] <= 106


class Solution {
    public ArrayList<Integer> maxOfMins(int[] arr) {
       int n = arr.length;
       ArrayList<Integer> res = new ArrayList<>(Collections.nCopies(n,0));
       int []nse = nextSmallerElement(arr,n);
       int []pse = previousSmallerElement(arr,n);
       for(int i=0;i<n;i++){
           int windowSize = (nse[i]-pse[i])-1;
           res.set(windowSize-1,Math.max(res.get(windowSize-1),arr[i]));
       }
       for(int i=n-2;i>=0;i--){
           res.set(i,Math.max(res.get(i),res.get(i+1)));
       }
       return res;
    }
    private int[] nextSmallerElement(int []arr,int n){
        int []nse = new int[n];
        Stack<Integer> st = new Stack<>();
        for(int i=n-1;i>=0;i--){
         while(!st.isEmpty() && arr[st.peek()] >= arr[i]){
             st.pop();
         }
         if(st.isEmpty()) nse[i]=n;
         else nse[i]=st.peek();
         st.push(i);
           
        }
        return nse;
    }
    private int[] previousSmallerElement(int []arr,int n){
         int []pse = new int[n];
        Stack<Integer> st = new Stack<>();
        for(int i=0;i<n;i++){
         while(!st.isEmpty() && arr[st.peek()] >= arr[i]){
             st.pop();
         }
         if(st.isEmpty()) pse[i]=-1;
         else pse[i]=st.peek();
         st.push(i);
           
        }
        return pse;
    }
    
}
