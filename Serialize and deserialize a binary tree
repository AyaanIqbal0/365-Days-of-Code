Serialization is to store a tree in an array so that it can be later restored and deserialization is reading tree back from the array. Complete the functions

serialize() : stores the tree into an array a and returns the array.
deSerialize() : deserializes the array to the tree and returns the root of the tree.
Note: Multiple nodes can have the same data and the node values are always positive integers. Your code will be correct if the tree returned by deSerialize(serialize(input_tree)) is same as the input tree. Driver code will print the in-order traversal of the tree returned by deSerialize(serialize(input_tree)).

Examples :

Input: root = [1, 2, 3]
      
Output: [2, 1, 3]
Input: root = [10, 20, 30, 40, 60, N, N]
      
Output: [40, 20, 60, 10, 30]
Constraints:
1 <= Number of nodes <= 104
1 <= Data of a node <= 109

class Tree {
    // Function to serialize a tree and return a list containing nodes of tree.
    public ArrayList<Integer> serialize(Node root) {
        ArrayList<Integer> arr = new ArrayList<>();
        if(root ==null){
            return arr;
        }
        
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            int size =q.size();
            for(int i=0;i<size;i++){
                Node node=q.poll();
                if(node==null){
                   arr.add(-1);
                    continue;
                }
                    arr.add(node.data);
                    q.offer(node.left);
                    q.offer(node.right);
            }
        }
        return  arr;
    }

    // Function to deserialize a list and construct the tree.
    public Node deSerialize(ArrayList<Integer> arr) {
        
         if(arr.size()==0){
             return null;
         }
        Queue<Node> q = new LinkedList<>();
        Node root = new Node(arr.get(0));
        q.offer(root);
        for(int i=1;i<arr.size();i++){
            Node parent = q.poll();
            if(arr.get(i)!=-1){
                Node left=new Node(arr.get(i));
                 parent.left=left;
                q.offer(parent.left);
            }
            if(arr.get(++i)!=-1){
                 Node right=new Node(arr.get(i));
                 parent.right=right;
                 q.offer(right);
            }
        }
        return root;
    }
}
