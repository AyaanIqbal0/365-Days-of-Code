You are given a string s and a list dictionary[] of words. Your task is to determine whether the string s can be formed by concatenating one or more words from the dictionary[].

Note: From dictionary[], any word can be taken any number of times and in any order.

Examples :

Input: s = "ilike", dictionary[] = ["i", "like", "gfg"]
Output: true
Explanation: s can be breakdown as "i like".
Input: s = "ilikegfg", dictionary = ["i", "like", "man", "india", "gfg"]
Output: true
Explanation: s can be breakdown as "i like gfg".
Input: s = "ilikemangoes", dictionary = ["i", "like", "man", "india", "gfg"]
Output: false
Explanation: s cannot be formed using dictionary[] words.
Constraints:
1 ≤ s.size() ≤ 3000
1 ≤ dictionary.size() ≤ 1000
1 ≤ dictionary[i].size() ≤ 100



class Solution {
    static int matrixMultiplication(int arr[]) {
        int N = arr.length;
       int [][]dp = new int [N][N];
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++){
                dp[i][j]=-1;
            }
        }
        
       return func(arr,1,N-1,dp);
    }
    private static int func(int arr[],int i,int j,int [][]dp){
        if(i == j){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int mini=Integer.MAX_VALUE;
        for(int k=i;k<=j-1;k++){
            int steps = (arr[i-1]*arr[k]*arr[j]) +
            func(arr,i,k,dp) + func(arr,k+1,j,dp);
            mini = Math.min(mini,steps);
        }
        return dp[i][j]= mini;
    }
}

