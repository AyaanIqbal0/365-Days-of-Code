In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

 

Example 1:


Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]
Example 2:


Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]
 

Constraints:

n == edges.length
3 <= n <= 1000
edges[i].length == 2
1 <= ai < bi <= edges.length
ai != bi
There are no repeated edges.
The given graph is connected.



class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>();
        int n = edges.length;
        for (int i = 0; i <=n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < n; i++) {
            adj.get(edges[i][1]).add(edges[i][0]);
            adj.get(edges[i][0]).add(edges[i][1]);
        }
        for (int i = n - 1; i >= 0; i--) {
           adj.get(edges[i][1]).remove(Integer.valueOf(edges[i][0]));
           adj.get(edges[i][0]).remove(Integer.valueOf(edges[i][1]));
            if (isPossible(adj, n, edges[i][0])) {
                return new int[] { edges[i][0], edges[i][1] };
            }
            adj.get(edges[i][1]).add(edges[i][0]);
            adj.get(edges[i][0]).add(edges[i][1]);
        }
        return new int[] { 0, 0 };
    }

    private boolean isPossible(List<List<Integer>> adj, int n, int node) {
        boolean[] vis = new boolean[n + 1];
        Queue<Integer> q = new LinkedList<>();
        q.add(node);
        vis[node] = true;
        int cnt =1;
        while (!q.isEmpty()) {
            int curr = q.poll();
            for (int adjNode : adj.get(curr)) {
                if (!vis[adjNode]) {
                    cnt++;
                    vis[adjNode]=true;
                    q.offer(adjNode);
                }
            }
        }
       return cnt == n;
    }
}
