Given an array arr of 0s and 1s. Find and return the length of the longest subarray with equal number of 0s and 1s.

Examples:

Input: arr[] = [1, 0, 1, 1, 1, 0, 0]
Output: 6
Explanation: arr[1...6] is the longest subarray with three 0s and three 1s.
Input: arr[] = [0, 0, 1, 1, 0]
Output: 4
Explnation: arr[0...3] or arr[1...4] is the longest subarray with two 0s and two 1s.
Input: arr[] = [0]
Output: 0
Explnation: There is no subarray with an equal number of 0s and 1s.
Constraints:
1 <= arr.size() <= 105
0 <= arr[i] <= 1




class Solution {
    public int maxLen(int[] arr) {
      int n = arr.length;
      for(int i=0;i<n;i++){
          if(arr[i]==0){
              arr[i]=-1;
          }
      }
      int maxLen=0;
      HashMap<Integer,Integer> prefixMap = new HashMap<>();
      int currSum=0;
      for(int i=0;i<n;i++){
          currSum+=arr[i];
          if(currSum ==0){
              maxLen =Math.max(maxLen,i+1);
          }
          if(prefixMap.containsKey(currSum)){
              maxLen =Math.max(maxLen,i-prefixMap.get(currSum));
          }
          if(!prefixMap.containsKey(currSum)){
              prefixMap.put(currSum,i);
          }
      }
      return maxLen;
    }
}
