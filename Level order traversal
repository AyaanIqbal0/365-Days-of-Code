Given a root of a binary tree with n nodes, the task is to find its level order traversal. Level order traversal of a tree is breadth-first traversal for the tree.

Examples:

Input: root[] = [1, 2, 3]

Output: [[1], [2, 3]]
Input: root[] = [10, 20, 30, 40, 50]

Output: [[10], [20, 30], [40, 50]]
Input: root[] = [1, 3, 2, N, N, N, 4, 6, 5]

Output: [[1], [3, 2], [4], [6, 5]]
Constraints:

1 ≤ number of nodes ≤ 105
0 ≤ node->data ≤ 109



class Solution {
    public ArrayList<ArrayList<Integer>> levelOrder(Node root) {
      ArrayList<ArrayList<Integer>> res = new ArrayList<>();
      Queue<Node> q = new LinkedList<>();
      q.offer(root);
      while(!q.isEmpty()){
        int size = q.size();
        ArrayList<Integer> currLevel = new ArrayList<>();
        for(int i=0;i<size;i++){
            Node node = q.poll();
            if(node.left!=null){
                q.offer(node.left);
            }
            if(node.right !=null){
                q.offer(node.right);
            }
            currLevel.add(node.data);
        }
        res.add(currLevel);
      }
      return res;
    }
}
