Given an array arr[], determine if it can be partitioned into two subsets such that the sum of elements in both parts is the same.

Note: Each element must be in exactly one subset.

Examples:

Input: arr = [1, 5, 11, 5]
Output: true
Explanation: The two parts are [1, 5, 5] and [11].
Input: arr = [1, 3, 5]
Output: false
Explanation: This array can never be partitioned into two such parts.
Constraints:
1 ≤ arr.size ≤ 100
1 ≤ arr[i] ≤ 200


class Solution {
    static boolean equalPartition(int arr[]) {
        int n = arr.length;
        int sum = 0;
        for (int val : arr) sum += val;

        if (sum % 2 != 0) return false;
        int target = sum / 2;

        boolean[][] dp = new boolean[n + 1][target + 1];

        for (int i = 0; i <= n; i++) dp[i][0] = true;

        for (int i = n - 1; i >= 0; i--) { 
            for (int s = 0; s <= target; s++) {
                boolean notTake = dp[i + 1][s]; 
                boolean take = (s >= arr[i]) ? dp[i + 1][s - arr[i]] : false;

                dp[i][s] = take || notTake; 
            }
        }
        return dp[0][target];
    }
}
